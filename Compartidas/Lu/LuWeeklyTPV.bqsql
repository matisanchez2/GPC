DECLARE vv_OPT_TAG_PAYER_TAGS_STRING STRING;
DECLARE vn_OPT_MONTHS_TPV_TIME_WINDOW INT64;
DECLARE vv_OPT_PAY_STATUS_ID STRING;
DECLARE vv_OPT_PAY_OPERATION_TYPE_ID STRING;
DECLARE vn_OPT_PAY_OPE_WALLET_FLAG INT64;
DECLARE vv_OPT_PAY_PURCHASE_FLAG_STD STRING;
DECLARE vv_OPT_PAY_PURCHASE_FLAG_OUTBOUND STRING;
DECLARE vv_OPT_CONCEPT_ID_1 STRING;
DECLARE vv_OPT_CONCEPT_ID_2 STRING;
DECLARE vv_OPT_CONCEPT_ID_3 STRING;
DECLARE vv_OPT_CONCEPT_ID_4 STRING;
DECLARE vv_OPT_CONCEPT_ID_5 STRING;

SET (vv_OPT_TAG_PAYER_TAGS_STRING,
     vn_OPT_MONTHS_TPV_TIME_WINDOW,
     vv_OPT_PAY_STATUS_ID,
     vv_OPT_PAY_OPERATION_TYPE_ID,
     vn_OPT_PAY_OPE_WALLET_FLAG,
     vv_OPT_PAY_PURCHASE_FLAG_STD,
     vv_OPT_PAY_PURCHASE_FLAG_OUTBOUND,
     vv_OPT_CONCEPT_ID_1,
     vv_OPT_CONCEPT_ID_2,
     vv_OPT_CONCEPT_ID_3,
     vv_OPT_CONCEPT_ID_4,
     vv_OPT_CONCEPT_ID_5
     ) = (SELECT AS STRUCT
                    MPP.OPT_TAG_PAYER_TAGS_STRING,
                    MPP.OPT_MONTHS_TPV_TIME_WINDOW,
                    MPP.OPT_PAY_STATUS_ID,
                    MPP.OPT_PAY_OPERATION_TYPE_ID,
                    MPP.OPT_PAY_OPE_WALLET_FLAG,
                    MPP.OPT_PAY_PURCHASE_FLAG_STD,
                    MPP.OPT_PAY_PURCHASE_FLAG_OUTBOUND,
                    MPP.OPT_CONCEPT_ID_1,
                    MPP.OPT_CONCEPT_ID_2,
                    MPP.OPT_CONCEPT_ID_3,
                    MPP.OPT_CONCEPT_ID_4,
                    MPP.OPT_CONCEPT_ID_5
            FROM meli-bi-data.SBOX_IT_CREDITS_CREDITSTBL.MC_PARAM_PAYMENTS AS MPP)
;

/**********************************
    D) INFO DESDE LA PAYMENTS
**********************************/

CREATE TEMPORARY TABLE SOCIAL_PAYMENTS_TAGS AS
SELECT  
     PAY_TAG.TAG_PAYMENT_ID AS PAY_PAYMENT_ID,
     PAY_TAG.TAG_PAYER_TAGS_STRING
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS_TAGS AS PAY_TAG
WHERE PAY_TAG.TAG_PAYER_TAGS_STRING = vv_OPT_TAG_PAYER_TAGS_STRING;


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT PAY.PAY_PAYMENT_ID,
     'MONEY SEND'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY.PAY_MOVE_DATE >= '2020-04-01'
AND PAY.PAY_CREATED_DT BETWEEN DATE_ADD(CURRENT_DATE, INTERVAL vn_OPT_MONTHS_TPV_TIME_WINDOW MONTH) AND CURRENT_DATE - 1
AND UPPER(PAY.PAY_OPERATION_TYPE_ID) = 'MONEY_TRANSFER'
AND UPPER(PAY.MP_PROD_ID) IN ('BJDCVRTMG2N001KTKN6G','BJDCUUVBF6RG01IIIOR0','BMA9OR7VDT6001KQFV90','BMA9P97VDT6001KQFV9G','BMA9PUFVDT6001KQFVA0','BMA9Q8NVDT6001KQFVAG','BMA9ROHF1U3G01H7POEG','BMA9RH7VDT6001KQFVBG');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT PAY.PAY_PAYMENT_ID,
     'MONEY SEND'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY.PAY_MOVE_DATE IS NULL
AND PAY.PAY_CREATED_DT >= '2020-04-01'
AND UPPER(PAY.PAY_OPERATION_TYPE_ID) = 'MONEY_TRANSFER'
AND UPPER(PAY.MP_PROD_ID) IN ('BJDCVRTMG2N001KTKN6G','BJDCUUVBF6RG01IIIOR0','BMA9OR7VDT6001KQFV90','BMA9P97VDT6001KQFV9G','BMA9PUFVDT6001KQFVA0','BMA9Q8NVDT6001KQFVAG','BMA9ROHF1U3G01H7POEG','BMA9RH7VDT6001KQFVBG');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT PAY.PAY_PAYMENT_ID,
     'PIX - MONEY SEND'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY.PAY_MOVE_DATE >= '2020-04-01'
AND PAY.PAY_CREATED_DT  BETWEEN DATE_ADD(CURRENT_DATE, INTERVAL vn_OPT_MONTHS_TPV_TIME_WINDOW MONTH) AND CURRENT_DATE - 1
AND UPPER(PAY.MP_PROD_ID) IN ('BSOO28NEOO6G01NJK3O0', 'BSOO1O89QS3001K5A0GG');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT  PAY.PAY_PAYMENT_ID,
     'PIX - MONEY SEND'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY.PAY_MOVE_DATE IS NULL
AND PAY.PAY_CREATED_DT >= '2020-04-01'
AND UPPER(PAY.MP_PROD_ID) IN ('BSOO28NEOO6G01NJK3O0', 'BSOO1O89QS3001K5A0GG');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT  PAY.PAY_PAYMENT_ID,
     'CREDITS - ORIGINATIONS'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY.PAY_MOVE_DATE >= '2021-03-01'
AND  PAY.PAY_CREATED_DT  BETWEEN DATE_ADD(CURRENT_DATE, INTERVAL vn_OPT_MONTHS_TPV_TIME_WINDOW MONTH) AND CURRENT_DATE - 1
AND  UPPER(PAY.MP_PROD_ID) IN ('C0C2VG5BCSDHCMR67IHG', 'C0C2V4TBCSDHCMR67IH0');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT  PAY.PAY_PAYMENT_ID,
            'CREDITS - ORIGINATIONS'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY.PAY_MOVE_DATE IS NULL
AND PAY.PAY_CREATED_DT >= '2021-03-01'
AND UPPER(PAY.MP_PROD_ID) IN ('C0C2VG5BCSDHCMR67IHG', 'C0C2V4TBCSDHCMR67IH0');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT  PAY.PAY_PAYMENT_ID,
     'COW FLOW'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY.PAY_MOVE_DATE >= '2020-04-01'
AND UPPER(PAY.PAY_OPERATION_TYPE_ID) = 'MONEY_TRANSFER'
AND (LOWER(PAY.ODR_ORDER_ID_GZ) LIKE 'individual_request-%' OR  LOWER(PAY.ODR_ORDER_ID_GZ) LIKE 'open_request-%' OR  LOWER(PAY.ODR_ORDER_ID_GZ) LIKE 'money_split-%' OR  LOWER(PAY.ODR_ORDER_ID_GZ) LIKE 'money_transfer-%'); 


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT  PAY.PAY_PAYMENT_ID,
     'COW FLOW'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY.PAY_MOVE_DATE IS NULL
AND PAY.PAY_CREATED_DT >= '2020-04-01'
AND UPPER(PAY.PAY_OPERATION_TYPE_ID) = 'MONEY_TRANSFER'
AND (LOWER(PAY.ODR_ORDER_ID_GZ) LIKE 'individual_request-%' OR  LOWER(PAY.ODR_ORDER_ID_GZ) LIKE 'open_request-%' OR  LOWER(PAY.ODR_ORDER_ID_GZ) LIKE 'money_split-%'OR  LOWER(PAY.ODR_ORDER_ID_GZ) LIKE 'money_transfer-%');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT PAY_PAYMENT_ID, 
     'MLB - BENEFICIO COMBUSTIBLE'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY_MOVE_DATE IS NULL
AND PAY.PAY_CREATED_DT >= '2021-01-01'
AND UPPER(MP_PROD_ID) IN ('C23GJI5KGKUA5JAMS5Q0');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT PAY_PAYMENT_ID, 
     'MLB - BENEFICIO COMBUSTIBLE'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY_MOVE_DATE >= '2021-01-01'
AND UPPER(MP_PROD_ID) IN ('C23GJI5KGKUA5JAMS5Q0');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT PAY_PAYMENT_ID, 
     'MLA - MONEY SEND'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY_MOVE_DATE IS NULL
AND PAY.PAY_CREATED_DT >= '2021-01-01'
AND UPPER(MP_PROD_ID) IN ('C3MR6IMF08VVHR8H5BJG');


INSERT INTO SOCIAL_PAYMENTS_TAGS (PAY_PAYMENT_ID, TAG_PAYER_TAGS_STRING)
SELECT PAY_PAYMENT_ID, 
     'MLA - MONEY SEND'
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
WHERE PAY_MOVE_DATE >= '2021-01-01'
AND UPPER(MP_PROD_ID) IN ('C3MR6IMF08VVHR8H5BJG');


--CALCULO MANUAL DE TPV DESDE LA PAYMENTS

--DROP TABLE PAYMENTS_TOT_1;
CREATE TEMPORARY TABLE PAYMENTS_TOT_1 AS
SELECT PAY.CUS_CUST_ID_SEL AS CUST_ID,
       PAY.PAY_CREATED_DT AS PAY_CREATED_DT,
       PAY.PAY_TOTAL_PAID_AMT AS PAY_TOTAL_PAID_AMT,
       PAY.PAY_COMBO_ID AS PAY_COMBO_ID,
       PAY.PAY_PROCESSING_MODE AS PAY_PROCESSING_MODE,
       PAY.PAY_STATUS_ID AS PAY_STATUS_ID
FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS AS PAY
LEFT JOIN SOCIAL_PAYMENTS_TAGS PAY_TAG ON PAY.PAY_PAYMENT_ID = PAY_TAG.PAY_PAYMENT_ID
WHERE EXISTS (SELECT 1 FROM meli-bi-data.SBOX_IT_CREDITS_CREDITSTBL.MC_PARAM_COUNTRIES AS COUNTRIES WHERE PAY.SIT_SITE_ID = COUNTRIES.SIT_SITE_ID)
AND (PAY.PAY_STATUS_ID = vv_OPT_PAY_STATUS_ID OR PAY.PAY_MOVE_DATE IS NOT NULL)
  AND PAY.PAY_CREATED_DT BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 13 MONTH) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
  AND (PAY.PAY_MOVE_DATE BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 13 MONTH) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
    OR
                (       PAY.PAY_MOVE_DATE IS NULL
                        AND PAY.PAY_PROCESSING_MODE = 'gateway'
                        AND PAY.SIT_SITE_ID IN ('MLA')
                ))
AND PAY.CUS_CUST_ID_BUY <> PAY.CUS_CUST_ID_SEL
AND PAY.PAY_OPERATION_TYPE_ID <> vv_OPT_PAY_OPERATION_TYPE_ID
AND PAY.PAY_OPE_WALLET_FLAG   <> vn_OPT_PAY_OPE_WALLET_FLAG
AND COALESCE(PAY.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_1
AND COALESCE(PAY.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_2
AND COALESCE(PAY.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_3
AND COALESCE(PAY.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_4
AND COALESCE(PAY.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_5
AND PAY.PAY_PURCHASE_FLAG = vv_OPT_PAY_PURCHASE_FLAG_STD
AND PAY_TAG.PAY_PAYMENT_ID IS NULL;



INSERT INTO PAYMENTS_TOT_1 (
CUST_ID, PAY_CREATED_DT, PAY_TOTAL_PAID_AMT, PAY_COMBO_ID, PAY_PROCESSING_MODE, PAY_STATUS_ID
  )
SELECT PAY_OUTBOUND.CUS_CUST_ID_SEL AS CUST_ID,
       PAY_OUTBOUND.PAY_CREATED_DT AS PAY_CREATED_DT,
       PAY_OUTBOUND.PAY_TOTAL_PAID_AMT AS PAY_TOTAL_PAID_AMT,
       PAY_OUTBOUND.PAY_COMBO_ID AS PAY_COMBO_ID,
       PAY_OUTBOUND.PAY_PROCESSING_MODE AS PAY_PROCESSING_MODE,
       PAY_OUTBOUND.PAY_STATUS_ID AS PAY_STATUS_ID

FROM meli-bi-data.WHOWNER.BT_MP_PAY_PAYMENTS_ALL AS PAY_OUTBOUND
LEFT JOIN  meli-bi-data.WHOWNER.LK_CRT_PAYMENTS AS CRT ON PAY_OUTBOUND.PAY_PAYMENT_ID = CRT.PAY_PAYMENT_ID
LEFT JOIN  SOCIAL_PAYMENTS_TAGS AS PAY_TAG ON PAY_OUTBOUND.PAY_PAYMENT_ID = PAY_TAG.PAY_PAYMENT_ID
WHERE (PAY_OUTBOUND.PAY_STATUS_ID = vv_OPT_PAY_STATUS_ID OR PAY_OUTBOUND.PAY_MOVE_DATE IS NOT NULL)
AND EXISTS (SELECT 1 FROM meli-bi-data.SBOX_IT_CREDITS_CREDITSTBL.MC_PARAM_COUNTRIES AS COUNTRIES WHERE PAY_OUTBOUND.SIT_SITE_ID = COUNTRIES.SIT_SITE_ID)
  AND PAY_OUTBOUND.PAY_CREATED_DT BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 13 MONTH) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
  AND PAY_OUTBOUND.PAY_MOVE_DATE BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 13 MONTH) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
AND PAY_OUTBOUND.CUS_CUST_ID_BUY <> PAY_OUTBOUND.CUS_CUST_ID_SEL
AND PAY_OUTBOUND.PAY_OPERATION_TYPE_ID <> vv_OPT_PAY_OPERATION_TYPE_ID
AND PAY_OUTBOUND.PAY_OPE_WALLET_FLAG   <> vn_OPT_PAY_OPE_WALLET_FLAG
AND COALESCE(PAY_OUTBOUND.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_1
AND COALESCE(PAY_OUTBOUND.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_2
AND COALESCE(PAY_OUTBOUND.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_3
AND COALESCE(PAY_OUTBOUND.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_4
AND COALESCE(PAY_OUTBOUND.CONCEPT_ID, 'N/A') <> vv_OPT_CONCEPT_ID_5
AND PAY_OUTBOUND.PAY_PURCHASE_FLAG = vv_OPT_PAY_PURCHASE_FLAG_OUTBOUND
AND PAY_TAG.PAY_PAYMENT_ID IS NULL;


CREATE TABLE meli-bi-data.SBOX_CREDITS_SB.PAYMENTS_TOT_analisis_postmigracion_mery_default AS
SELECT *
FROM PAYMENTS_TOT_1
;

---CREO UNA TABLA CON LA INFO DE DEFAULT DE LAS COHORTS---

CREATE TABLE meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES AS
SELECT A.*
FROM `meli-bi-data.SBOX_CREDITS_SB.VINTAGE_MERCHANTS` A
WHERE 
(A.TAG_OFERTA = 'EARLY OFFER' or A.TAG_OFERTA = 'FULL OFFER')
AND (COHORT = '202207' or COHORT = '202208' or COHORT = '202209')
;

CREATE TABLE meli-bi-data.SBOX_CREDITS_SB.PAYMENTS_TOT_analisis_postmigracion_mery_default_v1 AS
SELECT *
FROM meli-bi-data.SBOX_CREDITS_SB.PAYMENTS_TOT_analisis_postmigracion_mery_default
WHERE CUST_ID IN (SELECT CUS_CUST_ID_BORROWER FROM meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES GROUP BY 1)
;

---CREO LA TABLA CON EL DEFAULT Y LAS MARCAS---

DROP TABLE meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v1;

CREATE TABLE meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v1 AS
select 
SIT_SITE_ID,
COHORT,
TAG_OFERTA,
TAG_PRODUCTO,
CRD_CREDIT_ID,
CRD_CREDIT_AMOUNT,
CRD_CREDIT_AMOUNT_INSTALLMENTS,
ORIGINACIONES_SITE,
DEBT_BALANCE_INST_1,
DEBT_BALANCE_INST_2,
DEBT_BALANCE_INST_3,
DEBT_BALANCE_INST_4,
FINISH_DEBT_BALANCE_LAST_CLOSED,
DF_MIN,
DF_MAX,
CRD_CREDIT_AMOUNT_BHV_PAGO,
PAY_TOTAL_PAID_AMT AS TPV,

CASE WHEN PAY_CREATED_DT BETWEEN CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE) - 15 AND CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE) THEN 1 ELSE 0 END AS FLAG_L15D,
    CASE WHEN PAY_CREATED_DT BETWEEN CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE) - 7 AND CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE) THEN 1 ELSE 0 END AS FLAG_L7D,

      CASE
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 24) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 23) - 2 DAY) THEN 24
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 23) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 22) - 2 DAY) THEN 23
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 22) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 21) - 2 DAY) THEN 22
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 21) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 20) - 2 DAY) THEN 21
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 20) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 19) - 2 DAY) THEN 20
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 19) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 18) - 2 DAY) THEN 19
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 18) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 17) - 2 DAY) THEN 18
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 17) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 16) - 2 DAY) THEN 17
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 16) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 15) - 2 DAY) THEN 16
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 15) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 14) - 2 DAY) THEN 15
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 14) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 13) - 2 DAY) THEN 14
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 13) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 12) - 2 DAY) THEN 13
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 12) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 11) - 2 DAY) THEN 12
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 11) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 10) - 2 DAY) THEN 11
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 10) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 9) - 2 DAY) THEN 10
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 9) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 8) - 2 DAY) THEN 9
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 8) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 7) - 2 DAY) THEN 8
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 7) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 6) - 2 DAY) THEN 7
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 6) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 5) - 2 DAY) THEN 6
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 5) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 4) - 2 DAY) THEN 5
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 4) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 3) - 2 DAY) THEN 4
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 3) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 2) - 2 DAY) THEN 3
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 2) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 1) - 2 DAY) THEN 2
        WHEN PAY_CREATED_DT BETWEEN DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL (7 * 1) - 1 DAY) AND DATE_SUB(CAST(CRD_CREDIT_CREATION_DATE_ID AS DATE), INTERVAL 2 DAY) THEN 1 ELSE NULL END AS SEMANA_2,

    CASE WHEN PAY_COMBO_ID IN ('A', 'R', 'D') THEN 1 ELSE 0 END AS FLAG_FREEMIUM,
    CASE WHEN PAY_PROCESSING_MODE = 'gateway'THEN 1 ELSE 0 END AS FLAG_GATEWAY

FROM meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES a
left join meli-bi-data.SBOX_CREDITS_SB.PAYMENTS_TOT_analisis_postmigracion_mery_default_v1 b on 
a.CUS_CUST_ID_BORROWER = b.CUST_ID
GROUP BY 
1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22
;

CREATE TABLE meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v2 AS
SELECT 
SIT_SITE_ID,
COHORT,
TAG_OFERTA,
TAG_PRODUCTO,
CRD_CREDIT_ID,
CRD_CREDIT_AMOUNT,
CRD_CREDIT_AMOUNT_INSTALLMENTS,
ORIGINACIONES_SITE,
DEBT_BALANCE_INST_1,
DEBT_BALANCE_INST_2,
DEBT_BALANCE_INST_3,
DEBT_BALANCE_INST_4,
FINISH_DEBT_BALANCE_LAST_CLOSED,
DF_MIN,
DF_MAX,
CRD_CREDIT_AMOUNT_BHV_PAGO,

---Ultimos 7 anteriores a la propuesta---
SUM(CASE WHEN FLAG_L7D = 1 and FLAG_FREEMIUM = 0 AND FLAG_GATEWAY = 0 THEN TPV ELSE 0 END) AS tpv_L7D,
---ultimos 15 anteriores a la propuesta---
SUM(CASE WHEN FLAG_L15D = 1 and FLAG_FREEMIUM = 0 AND FLAG_GATEWAY = 0 THEN TPV ELSE 0 END) AS tpv_L15D,

---ultimo 3m descartando los 7 dias anteriores---
SUM(CASE WHEN SEMANA_2 in (2,3,4,5,6,7,8,9,10,11,12,13) and FLAG_FREEMIUM = 0 AND FLAG_GATEWAY = 0 THEN TPV ELSE 0 END) AS tpv_L3M_7D,
---ultimo 3m descartando los 15 dias anteriores---
SUM(CASE WHEN SEMANA_2 in (3,4,5,6,7,8,9,10,11,12,13,14) and FLAG_FREEMIUM = 0 AND FLAG_GATEWAY = 0 THEN TPV ELSE 0 END) AS tpv_L3M_15D

FROM meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v1
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16;


--SELECT CRD_CREDIT_ID, COUNT(CRD_CREDIT_ID) AS Q
--from meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v2
--GROUP BY 1
--HAVING Q>1
---CREO LA TABLA FINAL CON LOS INDICADORES---
CREATE TABLE meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v3 AS
SELECT 
SIT_SITE_ID,
COHORT,
TAG_OFERTA,
TAG_PRODUCTO,
CRD_CREDIT_ID,
CRD_CREDIT_AMOUNT,
CRD_CREDIT_AMOUNT_INSTALLMENTS,
ORIGINACIONES_SITE,
DEBT_BALANCE_INST_1,
DEBT_BALANCE_INST_2,
DEBT_BALANCE_INST_3,
DEBT_BALANCE_INST_4,
FINISH_DEBT_BALANCE_LAST_CLOSED,
DF_MIN,
DF_MAX,
CRD_CREDIT_AMOUNT_BHV_PAGO,
CASE WHEN (tpv_L7D) <= 0.1*(((tpv_L3M_7D)/12)) THEN 1 ELSE 0 END AS tpv_disminuyo90_7D_3m,
CASE WHEN (tpv_L15D) <= 0.1*(((tpv_L3M_15D)/6)) THEN 1 ELSE 0 END AS tpv_disminuyo90_15D_3m

from meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v2;

---SALIDA PARA EL EXCEL---

SELECT
A.SIT_SITE_ID,
--A.COHORT,
A.TAG_OFERTA,
A.TAG_PRODUCTO,
tpv_disminuyo90_7D_3m,
tpv_disminuyo90_15D_3m,
COUNT(A.CRD_CREDIT_ID) AS CANTIDAD,
SUM(A.CRD_CREDIT_AMOUNT) AS ORIGINACION,
SUM(A.CRD_CREDIT_AMOUNT_INSTALLMENTS)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00 AS PLAZO_PROMEDIO,
sum(CRD_CREDIT_AMOUNT/ORIGINACIONES_SITE) AS SHARE_ORIG,
SUM(A.DEBT_BALANCE_INST_1)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00*100 AS INST_1,
SUM(A.DEBT_BALANCE_INST_2)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00*100 AS INST_2,
SUM(A.DEBT_BALANCE_INST_3)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00*100 AS INST_3,
SUM(A.DEBT_BALANCE_INST_4)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00*100 AS INST_4,
SUM(FINISH_DEBT_BALANCE_LAST_CLOSED)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00*100 AS DF_FINISH_ALL,
SUM(DF_MIN*CRD_CREDIT_AMOUNT)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00 AS DF_MIN_TEORICO,
SUM(DF_MAX*CRD_CREDIT_AMOUNT)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00 AS DF_MAX_TEORICO,
SUM(CRD_CREDIT_AMOUNT_BHV_PAGO)*1.00/SUM(A.CRD_CREDIT_AMOUNT)*1.00 AS POR_BHV
     FROM meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v3 A
     GROUP BY 1, 2, 3, 4, 5
ORDER BY 1, 2, 3, 4, 5;

select * from meli-bi-data.SBOX_CREDITS_SB.BASE_default_APAGADOS_ALL_SITES_v3 limit 10;